import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
};

/** A comic book or trade paperback */
export type Book = {
  __typename?: 'Book';
  createdAt: Scalars['DateTime'];
  credits?: Maybe<Array<Credit>>;
  format?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  issue?: Maybe<Scalars['String']>;
  publisherName?: Maybe<Scalars['String']>;
  series?: Maybe<Series>;
  seriesName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
};

/** Autogenerated return type of CreateBook */
export type CreateBookPayload = {
  __typename?: 'CreateBookPayload';
  book?: Maybe<Book>;
  errors: Array<UserError>;
};

/** Autogenerated return type of CreatePublisher */
export type CreatePublisherPayload = {
  __typename?: 'CreatePublisherPayload';
  publisher?: Maybe<Publisher>;
  result?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of CreateSeries */
export type CreateSeriesPayload = {
  __typename?: 'CreateSeriesPayload';
  errors: Array<UserError>;
  series?: Maybe<Series>;
};

/** A person representing someone involved in the creation process of a book */
export type Creator = {
  __typename?: 'Creator';
  createdAt: Scalars['DateTime'];
  firstName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
};

/** An association of book and creator */
export type Credit = {
  __typename?: 'Credit';
  book: Book;
  createdAt: Scalars['DateTime'];
  creator: Creator;
  id: Scalars['ID'];
  role: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};


export type Mutation = {
  __typename?: 'Mutation';
  createBook?: Maybe<CreateBookPayload>;
  createPublisher?: Maybe<CreatePublisherPayload>;
  createSeries?: Maybe<CreateSeriesPayload>;
};


export type MutationCreateBookArgs = {
  title: Scalars['String'];
};


export type MutationCreatePublisherArgs = {
  name: Scalars['String'];
};


export type MutationCreateSeriesArgs = {
  publisherId: Scalars['ID'];
  name: Scalars['String'];
};

/** A book publishing company */
export type Publisher = {
  __typename?: 'Publisher';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  series: Array<Series>;
  updatedAt: Scalars['DateTime'];
};

export type Query = {
  __typename?: 'Query';
  book: Book;
  books: Array<Book>;
  publisher: Publisher;
  publishers: Array<Publisher>;
  series: Series;
  seriesList: Array<Series>;
};


export type QueryBookArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryPublisherArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QuerySeriesArgs = {
  id?: Maybe<Scalars['ID']>;
};

/** A collection of related books */
export type Series = {
  __typename?: 'Series';
  /** A list of books released in this series */
  books?: Maybe<Array<Book>>;
  id: Scalars['ID'];
  name: Scalars['String'];
  publisher?: Maybe<Publisher>;
};

/** A user-readable error */
export type UserError = {
  __typename?: 'UserError';
  /** A description of the error */
  message: Scalars['String'];
  /** Which input value this error came from */
  path?: Maybe<Array<Scalars['String']>>;
};

export type BookQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type BookQuery = (
  { __typename?: 'Query' }
  & { book: (
    { __typename?: 'Book' }
    & BookDetailsFragment
  ) }
);

export type BookDetailsFragment = (
  { __typename?: 'Book' }
  & Pick<Book, 'id' | 'title' | 'createdAt' | 'format' | 'issue' | 'updatedAt' | 'seriesName' | 'publisherName'>
  & { credits?: Maybe<Array<(
    { __typename?: 'Credit' }
    & CreditDetailsFragment
  )>> }
);

export type CreditDetailsFragment = (
  { __typename?: 'Credit' }
  & Pick<Credit, 'id'>
  & { book: (
    { __typename?: 'Book' }
    & Pick<Book, 'id'>
  ) }
);

export type BooksQueryVariables = Exact<{ [key: string]: never; }>;


export type BooksQuery = (
  { __typename?: 'Query' }
  & { books: Array<(
    { __typename?: 'Book' }
    & BookDetailsFragment
  )> }
);

export const CreditDetailsFragmentDoc = gql`
    fragment CreditDetails on Credit {
  id
  book {
    id
  }
}
    `;
export const BookDetailsFragmentDoc = gql`
    fragment BookDetails on Book {
  id
  title
  createdAt
  credits {
    ...CreditDetails
  }
  format
  issue
  updatedAt
  seriesName
  publisherName
}
    ${CreditDetailsFragmentDoc}`;
export const BookDocument = gql`
    query Book($id: ID!) {
  book(id: $id) {
    ...BookDetails
  }
}
    ${BookDetailsFragmentDoc}`;

/**
 * __useBookQuery__
 *
 * To run a query within a React component, call `useBookQuery` and pass it any options that fit your needs.
 * When your component renders, `useBookQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBookQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useBookQuery(baseOptions: Apollo.QueryHookOptions<BookQuery, BookQueryVariables>) {
        return Apollo.useQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);
      }
export function useBookLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BookQuery, BookQueryVariables>) {
          return Apollo.useLazyQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);
        }
export type BookQueryHookResult = ReturnType<typeof useBookQuery>;
export type BookLazyQueryHookResult = ReturnType<typeof useBookLazyQuery>;
export type BookQueryResult = Apollo.QueryResult<BookQuery, BookQueryVariables>;
export const BooksDocument = gql`
    query Books {
  books {
    ...BookDetails
  }
}
    ${BookDetailsFragmentDoc}`;

/**
 * __useBooksQuery__
 *
 * To run a query within a React component, call `useBooksQuery` and pass it any options that fit your needs.
 * When your component renders, `useBooksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBooksQuery({
 *   variables: {
 *   },
 * });
 */
export function useBooksQuery(baseOptions?: Apollo.QueryHookOptions<BooksQuery, BooksQueryVariables>) {
        return Apollo.useQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);
      }
export function useBooksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BooksQuery, BooksQueryVariables>) {
          return Apollo.useLazyQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);
        }
export type BooksQueryHookResult = ReturnType<typeof useBooksQuery>;
export type BooksLazyQueryHookResult = ReturnType<typeof useBooksLazyQuery>;
export type BooksQueryResult = Apollo.QueryResult<BooksQuery, BooksQueryVariables>;