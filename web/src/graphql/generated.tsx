import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
};

/** A comic book or trade paperback */
export type Book = {
  createdAt: Scalars['DateTime'];
  credits: Maybe<Array<Credit>>;
  format: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  issue: Maybe<Scalars['String']>;
  publisherName: Maybe<Scalars['String']>;
  series: Maybe<Series>;
  seriesName: Maybe<Scalars['String']>;
  title: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
};

/** Autogenerated return type of CreateBook */
export type CreateBookPayload = {
  book: Maybe<Book>;
  errors: Array<UserError>;
};

/** Autogenerated return type of CreatePublisher */
export type CreatePublisherPayload = {
  publisher: Maybe<Publisher>;
  result: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of CreateSeries */
export type CreateSeriesPayload = {
  errors: Array<UserError>;
  series: Maybe<Series>;
};

/** A person representing someone involved in the creation process of a book */
export type Creator = {
  createdAt: Scalars['DateTime'];
  firstName: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
};

/** An association of book and creator */
export type Credit = {
  book: Book;
  createdAt: Scalars['DateTime'];
  creator: Creator;
  id: Scalars['ID'];
  role: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};


export type Mutation = {
  createBook: Maybe<CreateBookPayload>;
  createPublisher: Maybe<CreatePublisherPayload>;
  createSeries: Maybe<CreateSeriesPayload>;
};


export type MutationCreateBookArgs = {
  title: Scalars['String'];
};


export type MutationCreatePublisherArgs = {
  name: Scalars['String'];
};


export type MutationCreateSeriesArgs = {
  publisherId: Scalars['ID'];
  name: Scalars['String'];
};

/** A book publishing company */
export type Publisher = {
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  series: Array<Series>;
  updatedAt: Scalars['DateTime'];
};

export type Query = {
  book: Book;
  books: Array<Book>;
  publisher: Publisher;
  publishers: Array<Publisher>;
  series: Series;
  seriesList: Array<Series>;
};


export type QueryBookArgs = {
  id: Maybe<Scalars['ID']>;
};


export type QueryPublisherArgs = {
  id: Maybe<Scalars['ID']>;
};


export type QuerySeriesArgs = {
  id: Maybe<Scalars['ID']>;
};

/** A collection of related books */
export type Series = {
  /** A list of books released in this series */
  books: Maybe<Array<Book>>;
  id: Scalars['ID'];
  name: Scalars['String'];
  publisher: Maybe<Publisher>;
};

/** A user-readable error */
export type UserError = {
  /** A description of the error */
  message: Scalars['String'];
  /** Which input value this error came from */
  path: Maybe<Array<Scalars['String']>>;
};

export type GetAllBooksQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllBooksQuery = { books: Array<BookDetailsFragment> };

export type BookDetailsFragment = (
  Pick<Book, 'id' | 'title' | 'createdAt' | 'format' | 'issue' | 'updatedAt' | 'seriesName' | 'publisherName'>
  & { credits: Maybe<Array<CreditDetailsFragment>> }
);

export type CreditDetailsFragment = (
  Pick<Credit, 'id'>
  & { book: Pick<Book, 'id'> }
);

export type GetBookQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetBookQuery = { book: BookDetailsFragment };

export const CreditDetailsFragmentDoc = gql`
    fragment CreditDetails on Credit {
  id
  book {
    id
  }
}
    `;
export const BookDetailsFragmentDoc = gql`
    fragment BookDetails on Book {
  id
  title
  createdAt
  credits {
    ...CreditDetails
  }
  format
  issue
  updatedAt
  seriesName
  publisherName
}
    ${CreditDetailsFragmentDoc}`;
export const GetAllBooksDocument = gql`
    query GetAllBooks {
  books {
    ...BookDetails
  }
}
    ${BookDetailsFragmentDoc}`;

/**
 * __useGetAllBooksQuery__
 *
 * To run a query within a React component, call `useGetAllBooksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllBooksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllBooksQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllBooksQuery(baseOptions?: Apollo.QueryHookOptions<GetAllBooksQuery, GetAllBooksQueryVariables>) {
        return Apollo.useQuery<GetAllBooksQuery, GetAllBooksQueryVariables>(GetAllBooksDocument, baseOptions);
      }
export function useGetAllBooksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllBooksQuery, GetAllBooksQueryVariables>) {
          return Apollo.useLazyQuery<GetAllBooksQuery, GetAllBooksQueryVariables>(GetAllBooksDocument, baseOptions);
        }
export type GetAllBooksQueryHookResult = ReturnType<typeof useGetAllBooksQuery>;
export type GetAllBooksLazyQueryHookResult = ReturnType<typeof useGetAllBooksLazyQuery>;
export type GetAllBooksQueryResult = Apollo.QueryResult<GetAllBooksQuery, GetAllBooksQueryVariables>;
export const GetBookDocument = gql`
    query GetBook($id: ID!) {
  book(id: $id) {
    ...BookDetails
  }
}
    ${BookDetailsFragmentDoc}`;

/**
 * __useGetBookQuery__
 *
 * To run a query within a React component, call `useGetBookQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBookQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBookQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBookQuery(baseOptions: Apollo.QueryHookOptions<GetBookQuery, GetBookQueryVariables>) {
        return Apollo.useQuery<GetBookQuery, GetBookQueryVariables>(GetBookDocument, baseOptions);
      }
export function useGetBookLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetBookQuery, GetBookQueryVariables>) {
          return Apollo.useLazyQuery<GetBookQuery, GetBookQueryVariables>(GetBookDocument, baseOptions);
        }
export type GetBookQueryHookResult = ReturnType<typeof useGetBookQuery>;
export type GetBookLazyQueryHookResult = ReturnType<typeof useGetBookLazyQuery>;
export type GetBookQueryResult = Apollo.QueryResult<GetBookQuery, GetBookQueryVariables>;