export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
};

export type AuthenticationResult = {
  __typename?: "AuthenticationResult";
  accessToken: Scalars["String"];
  me?: Maybe<User>;
  refreshToken: Scalars["String"];
};

/** A comic book or trade paperback */
export type Book = {
  __typename?: "Book";
  ageRating?: Maybe<Scalars["String"]>;
  alternateTitle?: Maybe<Scalars["String"]>;
  createdAt: Scalars["DateTime"];
  createdBy: User;
  credits?: Maybe<Array<Credit>>;
  displayName: Scalars["String"];
  format?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  issue?: Maybe<Scalars["String"]>;
  pageCount?: Maybe<Scalars["String"]>;
  price?: Maybe<Scalars["String"]>;
  publicationDate?: Maybe<Scalars["String"]>;
  publisher?: Maybe<Publisher>;
  publisherName?: Maybe<Scalars["String"]>;
  series?: Maybe<Series>;
  seriesName?: Maybe<Scalars["String"]>;
  summary?: Maybe<Scalars["String"]>;
  updatedAt: Scalars["DateTime"];
  updatedBy: User;
};

/** The connection type for Book. */
export type BookConnection = {
  __typename?: "BookConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BookEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Book>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type BookEdge = {
  __typename?: "BookEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Book>;
};

export type BookInput = {
  ageRating?: Maybe<Scalars["String"]>;
  alternateTitle?: Maybe<Scalars["String"]>;
  creditIds?: Maybe<Array<Scalars["ID"]>>;
  format?: Maybe<Scalars["String"]>;
  issue?: Maybe<Scalars["String"]>;
  pageCount?: Maybe<Scalars["String"]>;
  price?: Maybe<Scalars["String"]>;
  publicationDate?: Maybe<Scalars["String"]>;
  seriesId?: Maybe<Scalars["ID"]>;
  summary?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateBook */
export type CreateBookPayload = {
  __typename?: "CreateBookPayload";
  book?: Maybe<Book>;
  errors: Array<UserError>;
};

/** A person representing someone involved in the creation process of a book */
export type Creator = {
  __typename?: "Creator";
  createdAt: Scalars["DateTime"];
  credits: Array<Credit>;
  firstName?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  lastName?: Maybe<Scalars["String"]>;
  updatedAt: Scalars["DateTime"];
};

/** An association of book and creator */
export type Credit = {
  __typename?: "Credit";
  book: Book;
  createdAt: Scalars["DateTime"];
  creator: Creator;
  featured: Scalars["Boolean"];
  id: Scalars["ID"];
  /** The position this creator should be listed in a featured list */
  position?: Maybe<Scalars["Int"]>;
  role: Scalars["String"];
  updatedAt: Scalars["DateTime"];
};

export type LogInInput = {
  email: Scalars["String"];
  password: Scalars["String"];
};

export type LogOutInput = {
  everywhere?: Maybe<Scalars["Boolean"]>;
};

export type Message = {
  __typename?: "Message";
  message: Scalars["String"];
};

export type Mutation = {
  __typename?: "Mutation";
  createBook?: Maybe<CreateBookPayload>;
  createPublisher?: Maybe<Publisher>;
  createSeries?: Maybe<Series>;
  createUser?: Maybe<AuthenticationResult>;
  login?: Maybe<AuthenticationResult>;
  logout?: Maybe<Message>;
  refreshSession?: Maybe<AuthenticationResult>;
  register?: Maybe<AuthenticationResult>;
  updateBook?: Maybe<UpdateBookPayload>;
  updatePublisher?: Maybe<UpdatePublisherPayload>;
  updateSeries?: Maybe<UpdateSeriesPayload>;
};

export type MutationCreateBookArgs = {
  attributes: BookInput;
};

export type MutationCreatePublisherArgs = {
  input: PublisherInput;
};

export type MutationCreateSeriesArgs = {
  input: SeriesInput;
};

export type MutationCreateUserArgs = {
  input: RegistrationInput;
};

export type MutationLoginArgs = {
  input: LogInInput;
};

export type MutationLogoutArgs = {
  input: LogOutInput;
};

export type MutationRegisterArgs = {
  input: RegistrationInput;
};

export type MutationUpdateBookArgs = {
  id: Scalars["ID"];
  attributes: BookInput;
};

export type MutationUpdatePublisherArgs = {
  id: Scalars["ID"];
  attributes: PublisherInput;
};

export type MutationUpdateSeriesArgs = {
  id: Scalars["ID"];
  attributes: SeriesInput;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: "PageInfo";
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars["String"]>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars["Boolean"];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars["Boolean"];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars["String"]>;
};

/** A book publishing company */
export type Publisher = {
  __typename?: "Publisher";
  bookCount: Scalars["Int"];
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  name: Scalars["String"];
  series: Array<Series>;
  seriesCount: Scalars["Int"];
  updatedAt: Scalars["DateTime"];
};

/** The connection type for Publisher. */
export type PublisherConnection = {
  __typename?: "PublisherConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PublisherEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Publisher>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PublisherEdge = {
  __typename?: "PublisherEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Publisher>;
};

export type PublisherInput = {
  name: Scalars["String"];
};

export type Query = {
  __typename?: "Query";
  book: Book;
  books: BookConnection;
  creator: Creator;
  creators: Array<Creator>;
  publisher: Publisher;
  publishers: PublisherConnection;
  series: Series;
  seriesList: SeriesConnection;
  user: User;
  users: UserConnection;
};

export type QueryBookArgs = {
  id?: Maybe<Scalars["ID"]>;
};

export type QueryBooksArgs = {
  sortBy?: Maybe<SortAttributes>;
  limit?: Maybe<Scalars["Int"]>;
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryCreatorArgs = {
  id?: Maybe<Scalars["ID"]>;
};

export type QueryPublisherArgs = {
  id?: Maybe<Scalars["ID"]>;
};

export type QueryPublishersArgs = {
  sortBy?: Maybe<SortAttributes>;
  limit?: Maybe<Scalars["Int"]>;
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QuerySeriesArgs = {
  id?: Maybe<Scalars["ID"]>;
};

export type QuerySeriesListArgs = {
  sortBy?: Maybe<SortAttributes>;
  limit?: Maybe<Scalars["Int"]>;
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryUserArgs = {
  id: Scalars["ID"];
};

export type QueryUsersArgs = {
  sortBy?: Maybe<SortAttributes>;
  limit?: Maybe<Scalars["Int"]>;
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type RegistrationInput = {
  email: Scalars["String"];
  password: Scalars["String"];
  username: Scalars["String"];
};

/** A collection of related books */
export type Series = {
  __typename?: "Series";
  bookCount: Scalars["Int"];
  /** A list of books released in this series */
  books?: Maybe<Array<Book>>;
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  name: Scalars["String"];
  publisher?: Maybe<Publisher>;
  publisherName?: Maybe<Scalars["String"]>;
  updatedAt: Scalars["DateTime"];
};

/** A collection of related books */
export type SeriesBooksArgs = {
  limit?: Maybe<Scalars["Int"]>;
};

/** The connection type for Series. */
export type SeriesConnection = {
  __typename?: "SeriesConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SeriesEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Series>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type SeriesEdge = {
  __typename?: "SeriesEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Series>;
};

export type SeriesInput = {
  name: Scalars["String"];
  publisherId: Scalars["ID"];
};

/** Attributes for defining the sorting of the query results */
export type SortAttributes = {
  /** name of the field */
  field?: Maybe<Scalars["String"]>;
  /** direction of the sort */
  direction?: Maybe<SortDirectionEnum>;
};

export enum SortDirectionEnum {
  /** Ascending */
  Asc = "ASC",
  /** Descending */
  Desc = "DESC",
}

/** Autogenerated return type of UpdateBook */
export type UpdateBookPayload = {
  __typename?: "UpdateBookPayload";
  book?: Maybe<Book>;
  errors: Array<UserError>;
};

/** Autogenerated return type of UpdatePublisher */
export type UpdatePublisherPayload = {
  __typename?: "UpdatePublisherPayload";
  errors: Array<UserError>;
  publisher?: Maybe<Publisher>;
};

/** Autogenerated return type of UpdateSeries */
export type UpdateSeriesPayload = {
  __typename?: "UpdateSeriesPayload";
  errors: Array<UserError>;
  series?: Maybe<Series>;
};

/** A website user */
export type User = {
  __typename?: "User";
  avatar: Scalars["String"];
  createdAt: Scalars["DateTime"];
  email: Scalars["String"];
  id: Scalars["ID"];
  roles: Array<Scalars["String"]>;
  updatedAt: Scalars["DateTime"];
  username: Scalars["String"];
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: "UserConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: "UserEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

/** A user-readable error */
export type UserError = {
  __typename?: "UserError";
  /** A description of the error */
  message: Scalars["String"];
  /** Which input value this error came from */
  path?: Maybe<Array<Scalars["String"]>>;
};
